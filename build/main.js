'use strict';

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _compression = require('compression');

var _compression2 = _interopRequireDefault(_compression);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _chapterText = require('./api/chapter-text');

var _wordLookup = require('./api/word-lookup');

var _termSearch = require('./api/term-search');

var _logging = require('./util/logging');

var _logging2 = _interopRequireDefault(_logging);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MongoClient = require('mongodb').MongoClient;


var things = {
	mongo: false,
	express: false
};
console.log("WAITING:", Object.keys(things));
var declare_ready = function declare_ready(thing) {
	console.log("READY:", thing);
	things[thing] = true;
	if (Object.keys(things).reduce(function (c, k) {
		return c && things[k];
	}, true)) {
		console.log("READY READY READY!");
	}
};

var requiredEnvVar = function requiredEnvVar(variable) {
	if (!process.env.hasOwnProperty(variable)) {
		console.log('Sorry, we need "' + variable + '" to be set');
		process.exit();
	}
	return process.env[variable];
};

var mongoConnectionString = requiredEnvVar("MONGO_CONNECTION_STRING");
var mongoDatabase = requiredEnvVar("MONGO_DATABASE");
var mongoUrl = 'mongodb://' + mongoConnectionString + '/' + mongoDatabase;

var mongoConnection = null;
MongoClient.connect(mongoUrl, function (err, db) {
	if (err) {
		console.log("Error setting up mongo connection");
		console.log(err);
	} else {
		mongoConnection = db;
		declare_ready("mongo");
	}
});

var app = (0, _express2.default)();
app.use((0, _compression2.default)());
app.use(_bodyParser2.default.json());
app.use((0, _cors2.default)());
var port = +process.env.PORT || 3000;
var host = process.env.HOST || "127.0.0.1";
var server = app.listen(port, host, function () {
	console.log("Server listening to %s:%d within %s environment", host, port, app.get('env'));
	declare_ready("express");
});

// Use X-Forwarded-For
app.set('trust proxy', 'loopback');

console.log("Setting up routes");
app.post(['/api', '/api/*'], function (req, res) {
	var api_request = req.params;
	var params = req.body;
	console.log(api_request[0]);
	(0, _logging2.default)({ api_request: api_request, params: params, ip_address: req.ip });

	var responsePromise = new Promise(function (resolve, reject) {
		return resolve();
	});
	switch (api_request[0]) {
		case "term-search":
			responsePromise = (0, _termSearch.termSearch)(params, mongoConnection);
			break;
		case "collocation-search":
			responsePromise = (0, _termSearch.collocationSearch)(params);
			// response = termSearch(params) 
			break;
		case "word-study":
			// response = termSearch(params) 
			break;
		case "word-lookup":
			responsePromise = (0, _wordLookup.wordLookup)(params, mongoConnection);
			break;
		case "term-highlights":
			// response = termSearch(params) 
			break;
		case "chapter-text":
			responsePromise = (0, _chapterText.chapterText)(params, mongoConnection);
			break;
		default:
			responsePromise = new Promise(function (resolve, reject) {
				reject({
					"error": "Invalid api request. Request should be formatted /api/<type of request>",
					"options": ["term-search", "collocation-search", "word-study", "word-lookup", "term-highlights", "chapter-text"]
				});
			});
			break;
	}
	responsePromise.then(function (response) {
		res.send(response);
	}).catch(function (response) {
		res.send(response);
		console.log("error");
		console.log(response);
	});
});

// const clientRoot = "./client/build"
var clientRoot = requiredEnvVar("PARABIBLE_CLIENT_DIR");
var getUrl = function getUrl(mobile) {
	if (mobile) return '/mobile.html';else return '/index.html';
};
var needsFonts = function needsFonts(userAgent) {
	// technically this is not mobile - it's whether or not to dump fonts into the index.html
	var regexForMobile = {
		// Windows: /windows nt/i,
		WindowsPhone: /windows phone/i,
		// Mac: /macintosh/i,
		// Linux: /linux/i,
		Wii: /wii/i,
		Playstation: /playstation/i,
		iPad: /ipad/i,
		iPod: /ipod/i,
		iPhone: /iphone/i,
		Android: /android/i,
		Blackberry: /blackberry/i,
		Samsung: /samsung/i,
		// Curl: /curl/i
		Mobile: /mobile/i
	};
	return Object.keys(regexForMobile).reduce(function (a, k) {
		return a || regexForMobile[k].test(userAgent);
	}, false);
};

// Route order matters - the first listed will be invoked
app.get("/", function (req, res) {
	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), { root: clientRoot });
});
app.use(_express2.default.static(clientRoot));
app.get("*", function (req, res) {
	res.sendFile(getUrl(needsFonts(req.headers["user-agent"])), { root: clientRoot });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLmpzIl0sIm5hbWVzIjpbIk1vbmdvQ2xpZW50IiwicmVxdWlyZSIsInRoaW5ncyIsIm1vbmdvIiwiZXhwcmVzcyIsImNvbnNvbGUiLCJsb2ciLCJPYmplY3QiLCJrZXlzIiwiZGVjbGFyZV9yZWFkeSIsInRoaW5nIiwicmVkdWNlIiwiYyIsImsiLCJyZXF1aXJlZEVudlZhciIsInZhcmlhYmxlIiwicHJvY2VzcyIsImVudiIsImhhc093blByb3BlcnR5IiwiZXhpdCIsIm1vbmdvQ29ubmVjdGlvblN0cmluZyIsIm1vbmdvRGF0YWJhc2UiLCJtb25nb1VybCIsIm1vbmdvQ29ubmVjdGlvbiIsImNvbm5lY3QiLCJlcnIiLCJkYiIsImFwcCIsInVzZSIsImpzb24iLCJwb3J0IiwiUE9SVCIsImhvc3QiLCJIT1NUIiwic2VydmVyIiwibGlzdGVuIiwiZ2V0Iiwic2V0IiwicG9zdCIsInJlcSIsInJlcyIsImFwaV9yZXF1ZXN0IiwicGFyYW1zIiwiYm9keSIsImlwX2FkZHJlc3MiLCJpcCIsInJlc3BvbnNlUHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsInJlc3BvbnNlIiwic2VuZCIsImNhdGNoIiwiY2xpZW50Um9vdCIsImdldFVybCIsIm1vYmlsZSIsIm5lZWRzRm9udHMiLCJ1c2VyQWdlbnQiLCJyZWdleEZvck1vYmlsZSIsIldpbmRvd3NQaG9uZSIsIldpaSIsIlBsYXlzdGF0aW9uIiwiaVBhZCIsImlQb2QiLCJpUGhvbmUiLCJBbmRyb2lkIiwiQmxhY2tiZXJyeSIsIlNhbXN1bmciLCJNb2JpbGUiLCJhIiwidGVzdCIsInNlbmRGaWxlIiwiaGVhZGVycyIsInJvb3QiLCJzdGF0aWMiXSwibWFwcGluZ3MiOiI7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7O0FBVkEsSUFBSUEsY0FBY0MsUUFBUSxTQUFSLEVBQW1CRCxXQUFyQzs7O0FBWUEs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WyJ2YXIgTW9uZ29DbGllbnQgPSByZXF1aXJlKCdtb25nb2RiJykuTW9uZ29DbGllbnRcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnXG5pbXBvcnQgY29tcHJlc3Npb24gZnJvbSAnY29tcHJlc3Npb24nXG5pbXBvcnQgYm9keVBhcnNlciBmcm9tICdib2R5LXBhcnNlcidcbmltcG9ydCBjb3JzIGZyb20gJ2NvcnMnXG5cbmltcG9ydCB7IGNoYXB0ZXJUZXh0IH0gZnJvbSBcIi4vYXBpL2NoYXB0ZXItdGV4dFwiXG5pbXBvcnQgeyB3b3JkTG9va3VwIH0gZnJvbSBcIi4vYXBpL3dvcmQtbG9va3VwXCJcbmltcG9ydCB7IHRlcm1TZWFyY2gsIGNvbGxvY2F0aW9uU2VhcmNoIH0gZnJvbSBcIi4vYXBpL3Rlcm0tc2VhcmNoXCJcblxuaW1wb3J0IExvZyBmcm9tIFwiLi91dGlsL2xvZ2dpbmdcIlxuXG5sZXQgdGhpbmdzID0ge1xuXHRtb25nbzogZmFsc2UsXG5cdGV4cHJlc3M6IGZhbHNlXG59XG5jb25zb2xlLmxvZyhcIldBSVRJTkc6XCIsIE9iamVjdC5rZXlzKHRoaW5ncykpXG5jb25zdCBkZWNsYXJlX3JlYWR5ID0gKHRoaW5nKSA9PiB7XG5cdGNvbnNvbGUubG9nKFwiUkVBRFk6XCIsIHRoaW5nKVxuXHR0aGluZ3NbdGhpbmddID0gdHJ1ZVxuXHRpZiAoT2JqZWN0LmtleXModGhpbmdzKS5yZWR1Y2UoKGMsIGspID0+IGMgJiYgdGhpbmdzW2tdLCB0cnVlKSkge1xuXHRcdGNvbnNvbGUubG9nKFwiUkVBRFkgUkVBRFkgUkVBRFkhXCIpXG5cdH1cbn1cblxuXG5jb25zdCByZXF1aXJlZEVudlZhciA9ICh2YXJpYWJsZSkgPT4ge1xuXHRpZiAoIXByb2Nlc3MuZW52Lmhhc093blByb3BlcnR5KHZhcmlhYmxlKSkge1xuXHRcdGNvbnNvbGUubG9nKGBTb3JyeSwgd2UgbmVlZCBcIiR7dmFyaWFibGV9XCIgdG8gYmUgc2V0YClcblx0XHRwcm9jZXNzLmV4aXQoKVxuXHR9XG5cdHJldHVybiBwcm9jZXNzLmVudlt2YXJpYWJsZV1cbn1cblxuY29uc3QgbW9uZ29Db25uZWN0aW9uU3RyaW5nID0gcmVxdWlyZWRFbnZWYXIoXCJNT05HT19DT05ORUNUSU9OX1NUUklOR1wiKVxuY29uc3QgbW9uZ29EYXRhYmFzZSA9IHJlcXVpcmVkRW52VmFyKFwiTU9OR09fREFUQUJBU0VcIilcbmNvbnN0IG1vbmdvVXJsID0gYG1vbmdvZGI6Ly8ke21vbmdvQ29ubmVjdGlvblN0cmluZ30vJHttb25nb0RhdGFiYXNlfWBcblxubGV0IG1vbmdvQ29ubmVjdGlvbiA9IG51bGw7XG5Nb25nb0NsaWVudC5jb25uZWN0KG1vbmdvVXJsLCAoZXJyLCBkYikgPT4ge1xuXHRpZiAoZXJyKSB7XG5cdFx0Y29uc29sZS5sb2coXCJFcnJvciBzZXR0aW5nIHVwIG1vbmdvIGNvbm5lY3Rpb25cIilcblx0XHRjb25zb2xlLmxvZyhlcnIpXG5cdH1cblx0ZWxzZSB7XG5cdFx0bW9uZ29Db25uZWN0aW9uID0gZGJcblx0XHRkZWNsYXJlX3JlYWR5KFwibW9uZ29cIilcblx0fVxufSlcblxubGV0IGFwcCA9IGV4cHJlc3MoKVxuYXBwLnVzZShjb21wcmVzc2lvbigpKVxuYXBwLnVzZShib2R5UGFyc2VyLmpzb24oKSlcbmFwcC51c2UoY29ycygpKVxubGV0IHBvcnQgPSArcHJvY2Vzcy5lbnYuUE9SVCB8fCAzMDAwXG5sZXQgaG9zdCA9IHByb2Nlc3MuZW52LkhPU1QgfHwgXCIxMjcuMC4wLjFcIlxubGV0IHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgaG9zdCwgKCkgPT4ge1xuXHRjb25zb2xlLmxvZyhcIlNlcnZlciBsaXN0ZW5pbmcgdG8gJXM6JWQgd2l0aGluICVzIGVudmlyb25tZW50XCIsIGhvc3QsIHBvcnQsIGFwcC5nZXQoJ2VudicpKVxuXHRkZWNsYXJlX3JlYWR5KFwiZXhwcmVzc1wiKVxufSlcblxuLy8gVXNlIFgtRm9yd2FyZGVkLUZvclxuYXBwLnNldCgndHJ1c3QgcHJveHknLCAnbG9vcGJhY2snKVxuXG5cbmNvbnNvbGUubG9nKFwiU2V0dGluZyB1cCByb3V0ZXNcIilcbmFwcC5wb3N0KFsnL2FwaScsICcvYXBpLyonXSwgKHJlcSwgcmVzKSA9PiB7XG5cdGNvbnN0IGFwaV9yZXF1ZXN0ID0gcmVxLnBhcmFtc1xuXHRjb25zdCBwYXJhbXMgPSByZXEuYm9keVxuXHRjb25zb2xlLmxvZyhhcGlfcmVxdWVzdFswXSlcblx0TG9nKHsgYXBpX3JlcXVlc3QsIHBhcmFtcywgaXBfYWRkcmVzczogcmVxLmlwIH0pXG5cblx0bGV0IHJlc3BvbnNlUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHJlc29sdmUoKSlcblx0c3dpdGNoKGFwaV9yZXF1ZXN0WzBdKSB7XG5cdFx0Y2FzZSBcInRlcm0tc2VhcmNoXCI6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSB0ZXJtU2VhcmNoKHBhcmFtcywgbW9uZ29Db25uZWN0aW9uKVxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwiY29sbG9jYXRpb24tc2VhcmNoXCI6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSBjb2xsb2NhdGlvblNlYXJjaChwYXJhbXMpXG5cdFx0XHQvLyByZXNwb25zZSA9IHRlcm1TZWFyY2gocGFyYW1zKSBcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBcIndvcmQtc3R1ZHlcIjpcblx0XHRcdC8vIHJlc3BvbnNlID0gdGVybVNlYXJjaChwYXJhbXMpIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwid29yZC1sb29rdXBcIjpcblx0XHRcdHJlc3BvbnNlUHJvbWlzZSA9IHdvcmRMb29rdXAocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pIFxuXHRcdFx0YnJlYWtcblx0XHRjYXNlIFwidGVybS1oaWdobGlnaHRzXCI6XG5cdFx0XHQvLyByZXNwb25zZSA9IHRlcm1TZWFyY2gocGFyYW1zKSBcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSBcImNoYXB0ZXItdGV4dFwiOlxuXHRcdFx0cmVzcG9uc2VQcm9taXNlID0gY2hhcHRlclRleHQocGFyYW1zLCBtb25nb0Nvbm5lY3Rpb24pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXNwb25zZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHRcdHJlamVjdCh7XG5cdFx0XHRcdFx0XCJlcnJvclwiOiBcIkludmFsaWQgYXBpIHJlcXVlc3QuIFJlcXVlc3Qgc2hvdWxkIGJlIGZvcm1hdHRlZCAvYXBpLzx0eXBlIG9mIHJlcXVlc3Q+XCIsXG5cdFx0XHRcdFx0XCJvcHRpb25zXCI6IFtcblx0XHRcdFx0XHRcdFwidGVybS1zZWFyY2hcIixcblx0XHRcdFx0XHRcdFwiY29sbG9jYXRpb24tc2VhcmNoXCIsXG5cdFx0XHRcdFx0XHRcIndvcmQtc3R1ZHlcIixcblx0XHRcdFx0XHRcdFwid29yZC1sb29rdXBcIixcblx0XHRcdFx0XHRcdFwidGVybS1oaWdobGlnaHRzXCIsXG5cdFx0XHRcdFx0XHRcImNoYXB0ZXItdGV4dFwiXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9KVxuXHRcdFx0fSlcblx0XHRcdGJyZWFrXG5cdH1cblx0cmVzcG9uc2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0cmVzLnNlbmQocmVzcG9uc2UpXG5cdH0pLmNhdGNoKChyZXNwb25zZSkgPT4ge1xuXHRcdHJlcy5zZW5kKHJlc3BvbnNlKVxuXHRcdGNvbnNvbGUubG9nKFwiZXJyb3JcIilcblx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSlcblx0fSlcbn0pXG5cblxuLy8gY29uc3QgY2xpZW50Um9vdCA9IFwiLi9jbGllbnQvYnVpbGRcIlxuY29uc3QgY2xpZW50Um9vdCA9IHJlcXVpcmVkRW52VmFyKFwiUEFSQUJJQkxFX0NMSUVOVF9ESVJcIilcbmNvbnN0IGdldFVybCA9IChtb2JpbGUpID0+IHtcblx0aWYgKG1vYmlsZSlcblx0XHRyZXR1cm4gJy9tb2JpbGUuaHRtbCdcblx0ZWxzZVxuXHRcdHJldHVybiAnL2luZGV4Lmh0bWwnXG59XG5jb25zdCBuZWVkc0ZvbnRzID0gKHVzZXJBZ2VudCkgPT4ge1xuXHQvLyB0ZWNobmljYWxseSB0aGlzIGlzIG5vdCBtb2JpbGUgLSBpdCdzIHdoZXRoZXIgb3Igbm90IHRvIGR1bXAgZm9udHMgaW50byB0aGUgaW5kZXguaHRtbFxuXHRjb25zdCByZWdleEZvck1vYmlsZSA9IHtcblx0XHQvLyBXaW5kb3dzOiAvd2luZG93cyBudC9pLFxuXHRcdFdpbmRvd3NQaG9uZTogL3dpbmRvd3MgcGhvbmUvaSxcblx0XHQvLyBNYWM6IC9tYWNpbnRvc2gvaSxcblx0XHQvLyBMaW51eDogL2xpbnV4L2ksXG5cdFx0V2lpOiAvd2lpL2ksXG5cdFx0UGxheXN0YXRpb246IC9wbGF5c3RhdGlvbi9pLFxuXHRcdGlQYWQ6IC9pcGFkL2ksXG5cdFx0aVBvZDogL2lwb2QvaSxcblx0XHRpUGhvbmU6IC9pcGhvbmUvaSxcblx0XHRBbmRyb2lkOiAvYW5kcm9pZC9pLFxuXHRcdEJsYWNrYmVycnk6IC9ibGFja2JlcnJ5L2ksXG5cdFx0U2Ftc3VuZzogL3NhbXN1bmcvaSxcblx0XHQvLyBDdXJsOiAvY3VybC9pXG5cdFx0TW9iaWxlOiAvbW9iaWxlL2lcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMocmVnZXhGb3JNb2JpbGUpLnJlZHVjZSgoYSwgaykgPT5cblx0XHRhIHx8IHJlZ2V4Rm9yTW9iaWxlW2tdLnRlc3QodXNlckFnZW50KSxcblx0ZmFsc2UpXG59XG5cbi8vIFJvdXRlIG9yZGVyIG1hdHRlcnMgLSB0aGUgZmlyc3QgbGlzdGVkIHdpbGwgYmUgaW52b2tlZFxuYXBwLmdldChcIi9cIiwgKHJlcSwgcmVzKSA9PiB7XG5cdHJlcy5zZW5kRmlsZShnZXRVcmwobmVlZHNGb250cyhyZXEuaGVhZGVyc1tcInVzZXItYWdlbnRcIl0pKSwge3Jvb3Q6IGNsaWVudFJvb3R9KVxufSlcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMoY2xpZW50Um9vdCkpXG5hcHAuZ2V0KFwiKlwiLCAocmVxLCByZXMpID0+IHtcblx0cmVzLnNlbmRGaWxlKGdldFVybChuZWVkc0ZvbnRzKHJlcS5oZWFkZXJzW1widXNlci1hZ2VudFwiXSkpLCB7cm9vdDogY2xpZW50Um9vdH0pXG59KSJdfQ==