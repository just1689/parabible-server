'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.chapterText = exports.ridlistText = undefined;

var _book_names = require('../../data/book_names.json');

var _book_names2 = _interopRequireDefault(_book_names);

var _termSearch = require('./term-search');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var allowedTexts = ["wlc", "net", "lxx", "sbl"];

var ridlistText = function ridlistText(ridlist, unfilteredParamTexts, db) {
	var filteredTextList = allowedTexts.filter(function (t) {
		return unfilteredParamTexts.has(t);
	});
	if (filteredTextList.length === 0) filteredTextList.push("net");
	var requestedTextsSet = new Set(filteredTextList);

	return new Promise(function (resolve, reject) {
		var ridlistResponse = {};
		//TODO: change "in" to {$gte: min, $lt: max}
		//[or at least make it a possibilty
		// - we need the ridlist idea for search results
		// - but definitely not for chapters
		var cursor = db.collection("verse_data").find({ rid: { $in: ridlist } });
		cursor.each(function (err, doc) {
			if (err) console.log("ERROR", err);
			if (doc != null) {
				ridlistResponse[doc["rid"]] = {};
				requestedTextsSet.forEach(function (text) {
					if (doc.hasOwnProperty(text)) {
						ridlistResponse[doc["rid"]][text] = doc[text];
					}
				});
			} else {
				resolve(ridlistResponse);
			}
		});
	});
};

var chapterText = function chapterText(params, db) {
	var ref = params.reference;
	var unfilteredParamTexts = params["texts"] ? new Set(params["texts"]) : new Set([]);

	var highlights = {};
	if (params.hasOwnProperty("search_terms")) {
		params.search_terms.forEach(function (st) {
			highlights[st.uid] = (0, _termSearch._wordsThatMatchQuery)(st.data, [ref.book], ref.chapter);
		});
	}

	var minv = _book_names2.default[ref.book] * 10000000 + ref.chapter * 1000;
	var maxv = _book_names2.default[ref.book] * 10000000 + (ref.chapter + 1) * 1000;
	return new Promise(function (resolve, reject) {
		ridlistText(Array.from({ length: maxv - minv }, function (v, k) {
			return k + minv;
		}), unfilteredParamTexts, db).then(function (texts) {
			var returnVal = {
				"reference": params.reference,
				"text": texts
			};
			if (Object.keys(highlights).length > 0) returnVal["highlights"] = highlights;
			resolve(returnVal);
		}).catch(function (err) {
			reject(err);
		});
	});
};
exports.ridlistText = ridlistText;
exports.chapterText = chapterText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhcHRlci10ZXh0LmpzIl0sIm5hbWVzIjpbImFsbG93ZWRUZXh0cyIsInJpZGxpc3RUZXh0IiwicmlkbGlzdCIsInVuZmlsdGVyZWRQYXJhbVRleHRzIiwiZGIiLCJmaWx0ZXJlZFRleHRMaXN0IiwiZmlsdGVyIiwiaGFzIiwidCIsImxlbmd0aCIsInB1c2giLCJyZXF1ZXN0ZWRUZXh0c1NldCIsIlNldCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmlkbGlzdFJlc3BvbnNlIiwiY3Vyc29yIiwiY29sbGVjdGlvbiIsImZpbmQiLCJyaWQiLCIkaW4iLCJlYWNoIiwiZXJyIiwiZG9jIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJoYXNPd25Qcm9wZXJ0eSIsInRleHQiLCJjaGFwdGVyVGV4dCIsInBhcmFtcyIsInJlZiIsInJlZmVyZW5jZSIsImhpZ2hsaWdodHMiLCJzZWFyY2hfdGVybXMiLCJzdCIsInVpZCIsImRhdGEiLCJib29rIiwiY2hhcHRlciIsIm1pbnYiLCJtYXh2IiwiQXJyYXkiLCJmcm9tIiwidiIsImsiLCJ0aGVuIiwidGV4dHMiLCJyZXR1cm5WYWwiLCJPYmplY3QiLCJrZXlzIiwiY2F0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBRUEsSUFBTUEsZUFBZSxDQUNwQixLQURvQixFQUVwQixLQUZvQixFQUdwQixLQUhvQixFQUlwQixLQUpvQixDQUFyQjs7QUFPQSxJQUFNQyxjQUFjLFNBQWRBLFdBQWMsQ0FBQ0MsT0FBRCxFQUFVQyxvQkFBVixFQUFnQ0MsRUFBaEMsRUFBdUM7QUFDMUQsS0FBTUMsbUJBQW1CTCxhQUFhTSxNQUFiLENBQW9CO0FBQUEsU0FBS0gscUJBQXFCSSxHQUFyQixDQUF5QkMsQ0FBekIsQ0FBTDtBQUFBLEVBQXBCLENBQXpCO0FBQ0EsS0FBSUgsaUJBQWlCSSxNQUFqQixLQUE0QixDQUFoQyxFQUNDSixpQkFBaUJLLElBQWpCLENBQXNCLEtB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QWE2QixXLEdBQUFBLFciLCJmaWxlIjoiY2hhcHRlci10ZXh0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJvb2tfbmFtZXMgZnJvbSAnLi4vLi4vZGF0YS9ib29rX25hbWVzLmpzb24nXG5pbXBvcnQgeyBfd29yZHNUaGF0TWF0Y2hRdWVyeSB9IGZyb20gJy4vdGVybS1zZWFyY2gnXG5cbmNvbnN0IGFsbG93ZWRUZXh0cyA9IFtcblx0XCJ3bGNcIixcblx0XCJuZXRcIixcblx0XCJseHhcIixcblx0XCJzYmxcIlxuXVxuXG5jb25zdCByaWRsaXN0VGV4dCA9IChyaWRsaXN0LCB1bmZpbHRlcmVkUGFyYW1UZXh0cywgZGIpID0+IHtcblx0Y29uc3QgZmlsdGVyZWRUZXh0TGlzdCA9IGFsbG93ZWRUZXh0cy5maWx0ZXIodCA9PiB1bmZpbHRlcmVkUGFyYW1UZXh0cy5oYXModCkpXG5cdGlmIChmaWx0ZXJlZFRleHRMaXN0Lmxlbmd0aCA9PT0gMClcblx0XHRmaWx0ZXJlZFRleHRMaXN0LnB1c2goXCJuZXRcIilcblx0Y29uc3QgcmVxdWVzdGVkVGV4dHNTZXQgPSBuZXcgU2V0KGZpbHRlcmVkVGV4dExpc3QpXG5cblx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRsZXQgcmlkbGlzdFJlc3BvbnNlID0ge31cblx0XHQvL1RPRE86IGNoYW5nZSBcImluXCIgdG8geyRndGU6IG1pbiwgJGx0OiBtYXh9XG5cdFx0Ly9bb3IgYXQgbGVhc3QgbWFrZSBpdCBhIHBvc3NpYmlsdHlcblx0XHQvLyAtIHdlIG5lZWQgdGhlIHJpZGxpc3QgaWRlYSBmb3Igc2VhcmNoIHJlc3VsdHNcblx0XHQvLyAtIGJ1dCBkZWZpbml0ZWx5IG5vdCBmb3IgY2hhcHRlcnNcblx0XHRjb25zdCBjdXJzb3IgPSBkYi5jb2xsZWN0aW9uKFwidmVyc2VfZGF0YVwiKS5maW5kKHsgcmlkOiB7ICRpbjogcmlkbGlzdCB9IH0pXG5cdFx0Y3Vyc29yLmVhY2goKGVyciwgZG9jKSA9PiB7XG5cdFx0XHRpZiAoZXJyKVxuXHRcdFx0XHRjb25zb2xlLmxvZyhcIkVSUk9SXCIsIGVycilcblx0XHRcdGlmIChkb2MgIT0gbnVsbCkge1xuXHRcdFx0XHRyaWRsaXN0UmVzcG9uc2VbZG9jW1wicmlkXCJdXSA9IHt9XG5cdFx0XHRcdHJlcXVlc3RlZFRleHRzU2V0LmZvckVhY2godGV4dCA9PiB7XG5cdFx0XHRcdFx0aWYgKGRvYy5oYXNPd25Qcm9wZXJ0eSh0ZXh0KSkge1xuXHRcdFx0XHRcdFx0cmlkbGlzdFJlc3BvbnNlW2RvY1tcInJpZFwiXV1bdGV4dF0gPSBkb2NbdGV4dF1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXNvbHZlKHJpZGxpc3RSZXNwb25zZSlcblx0XHRcdH1cblx0XHR9KVxuXHR9KVxufVxuXG5jb25zdCBjaGFwdGVyVGV4dCA9IChwYXJhbXMsIGRiKSA9PiB7XG5cdGNvbnN0IHJlZiA9IHBhcmFtcy5yZWZlcmVuY2Vcblx0Y29uc3QgdW5maWx0ZXJlZFBhcmFtVGV4dHMgPSBwYXJhbXNbXCJ0ZXh0c1wiXSA/IG5ldyBTZXQocGFyYW1zW1widGV4dHNcIl0pIDogbmV3IFNldChbXSlcblxuXHRsZXQgaGlnaGxpZ2h0cyA9IHt9XG5cdGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJzZWFyY2hfdGVybXNcIikpIHtcblx0XHRwYXJhbXMuc2VhcmNoX3Rlcm1zLmZvckVhY2goc3QgPT4ge1xuXHRcdFx0aGlnaGxpZ2h0c1tzdC51aWRdID0gX3dvcmRzVGhhdE1hdGNoUXVlcnkoc3QuZGF0YSwgW3JlZi5ib29rXSwgcmVmLmNoYXB0ZXIpXG5cdFx0fSlcblx0fVxuXG5cdGNvbnN0IG1pbnYgPSBib29rX25hbWVzW3JlZi5ib29rXSAqIDEwMDAwMDAwICsgcmVmLmNoYXB0ZXIgKiAxMDAwXG5cdGNvbnN0IG1heHYgPSBib29rX25hbWVzW3JlZi5ib29rXSAqIDEwMDAwMDAwICsgKHJlZi5jaGFwdGVyKzEpICogMTAwMFxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdHJpZGxpc3RUZXh0KEFycmF5LmZyb20oe2xlbmd0aDogbWF4di1taW52fSwgKHYsIGspID0+IGsrbWludiksIHVuZmlsdGVyZWRQYXJhbVRleHRzLCBkYikudGhlbigodGV4dHMpID0+IHtcblx0XHRcdGNvbnN0IHJldHVyblZhbCA9IHtcblx0XHRcdFx0XCJyZWZlcmVuY2VcIjogcGFyYW1zLnJlZmVyZW5jZSxcblx0XHRcdFx0XCJ0ZXh0XCI6IHRleHRzXG5cdFx0XHR9XG5cdFx0XHRpZiAoT2JqZWN0LmtleXMoaGlnaGxpZ2h0cykubGVuZ3RoID4gMClcblx0XHRcdFx0cmV0dXJuVmFsW1wiaGlnaGxpZ2h0c1wiXSA9IGhpZ2hsaWdodHNcblx0XHRcdHJlc29sdmUocmV0dXJuVmFsKVxuXHRcdH0pLmNhdGNoKChlcnIpID0+IHtcblx0XHRcdHJlamVjdChlcnIpXG5cdFx0fSlcblx0fSlcbn1cbmV4cG9ydCB7IHJpZGxpc3RUZXh0LCBjaGFwdGVyVGV4dCB9XG4iXX0=